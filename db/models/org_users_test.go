// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrgUsers(t *testing.T) {
	t.Parallel()

	query := OrgUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrgUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrgUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrgUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrgUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrgUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrgUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrgUserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrgUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrgUserExists to return true, but got false.")
	}
}

func testOrgUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orgUserFound, err := FindOrgUser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orgUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrgUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrgUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrgUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrgUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrgUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orgUserOne := &OrgUser{}
	orgUserTwo := &OrgUser{}
	if err = randomize.Struct(seed, orgUserOne, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}
	if err = randomize.Struct(seed, orgUserTwo, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orgUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orgUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrgUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrgUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orgUserOne := &OrgUser{}
	orgUserTwo := &OrgUser{}
	if err = randomize.Struct(seed, orgUserOne, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}
	if err = randomize.Struct(seed, orgUserTwo, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orgUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orgUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orgUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func orgUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrgUser) error {
	*o = OrgUser{}
	return nil
}

func testOrgUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrgUser{}
	o := &OrgUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orgUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrgUser object: %s", err)
	}

	AddOrgUserHook(boil.BeforeInsertHook, orgUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orgUserBeforeInsertHooks = []OrgUserHook{}

	AddOrgUserHook(boil.AfterInsertHook, orgUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orgUserAfterInsertHooks = []OrgUserHook{}

	AddOrgUserHook(boil.AfterSelectHook, orgUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orgUserAfterSelectHooks = []OrgUserHook{}

	AddOrgUserHook(boil.BeforeUpdateHook, orgUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orgUserBeforeUpdateHooks = []OrgUserHook{}

	AddOrgUserHook(boil.AfterUpdateHook, orgUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orgUserAfterUpdateHooks = []OrgUserHook{}

	AddOrgUserHook(boil.BeforeDeleteHook, orgUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orgUserBeforeDeleteHooks = []OrgUserHook{}

	AddOrgUserHook(boil.AfterDeleteHook, orgUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orgUserAfterDeleteHooks = []OrgUserHook{}

	AddOrgUserHook(boil.BeforeUpsertHook, orgUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orgUserBeforeUpsertHooks = []OrgUserHook{}

	AddOrgUserHook(boil.AfterUpsertHook, orgUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orgUserAfterUpsertHooks = []OrgUserHook{}
}

func testOrgUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrgUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orgUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrgUserToOneAbstractUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrgUser
	var foreign AbstractUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, abstractUserDBTypes, false, abstractUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AbstractUser struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.InternalID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.InternalID != foreign.InternalID {
		t.Errorf("want: %v, got %v", foreign.InternalID, check.InternalID)
	}

	ranAfterSelectHook := false
	AddAbstractUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AbstractUser) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrgUserSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*OrgUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrgUserToOneOrgUsingOrg(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrgUser
	var foreign Org

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orgUserDBTypes, false, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orgDBTypes, false, orgColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Org struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrgID = foreign.InternalID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Org().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.InternalID != foreign.InternalID {
		t.Errorf("want: %v, got %v", foreign.InternalID, check.InternalID)
	}

	ranAfterSelectHook := false
	AddOrgHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Org) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrgUserSlice{&local}
	if err = local.L.LoadOrg(ctx, tx, false, (*[]*OrgUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Org == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Org = nil
	if err = local.L.LoadOrg(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Org == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrgUserToOneSetOpAbstractUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrgUser
	var b, c AbstractUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orgUserDBTypes, false, strmangle.SetComplement(orgUserPrimaryKeyColumns, orgUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, abstractUserDBTypes, false, strmangle.SetComplement(abstractUserPrimaryKeyColumns, abstractUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, abstractUserDBTypes, false, strmangle.SetComplement(abstractUserPrimaryKeyColumns, abstractUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AbstractUser{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserOrgUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.InternalID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.InternalID {
			t.Error("foreign key was wrong value", a.UserID, x.InternalID)
		}
	}
}
func testOrgUserToOneSetOpOrgUsingOrg(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrgUser
	var b, c Org

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orgUserDBTypes, false, strmangle.SetComplement(orgUserPrimaryKeyColumns, orgUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orgDBTypes, false, strmangle.SetComplement(orgPrimaryKeyColumns, orgColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orgDBTypes, false, strmangle.SetComplement(orgPrimaryKeyColumns, orgColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Org{&b, &c} {
		err = a.SetOrg(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Org != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrgUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrgID != x.InternalID {
			t.Error("foreign key was wrong value", a.OrgID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrgID))
		reflect.Indirect(reflect.ValueOf(&a.OrgID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrgID != x.InternalID {
			t.Error("foreign key was wrong value", a.OrgID, x.InternalID)
		}
	}
}

func testOrgUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrgUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrgUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrgUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrgUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orgUserDBTypes = map[string]string{`ID`: `character varying`, `InternalID`: `integer`, `UserID`: `integer`, `Admin`: `boolean`, `OrgID`: `integer`}
	_              = bytes.MinRead
)

func testOrgUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orgUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orgUserAllColumns) == len(orgUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrgUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orgUserAllColumns) == len(orgUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrgUser{}
	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orgUserDBTypes, true, orgUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orgUserAllColumns, orgUserPrimaryKeyColumns) {
		fields = orgUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			orgUserAllColumns,
			orgUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrgUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrgUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(orgUserAllColumns) == len(orgUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrgUser{}
	if err = randomize.Struct(seed, &o, orgUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrgUser: %s", err)
	}

	count, err := OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orgUserDBTypes, false, orgUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrgUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrgUser: %s", err)
	}

	count, err = OrgUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
