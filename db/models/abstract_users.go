// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AbstractUser is an object representing the database table.
type AbstractUser struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	InternalID int    `boil:"internal_id" json:"internal_id" toml:"internal_id" yaml:"internal_id"`
	Email      string `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password   string `boil:"password" json:"password" toml:"password" yaml:"password"`

	R *abstractUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L abstractUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AbstractUserColumns = struct {
	ID         string
	InternalID string
	Email      string
	Password   string
}{
	ID:         "id",
	InternalID: "internal_id",
	Email:      "email",
	Password:   "password",
}

var AbstractUserTableColumns = struct {
	ID         string
	InternalID string
	Email      string
	Password   string
}{
	ID:         "abstract_users.id",
	InternalID: "abstract_users.internal_id",
	Email:      "abstract_users.email",
	Password:   "abstract_users.password",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AbstractUserWhere = struct {
	ID         whereHelperstring
	InternalID whereHelperint
	Email      whereHelperstring
	Password   whereHelperstring
}{
	ID:         whereHelperstring{field: "\"abstract_users\".\"id\""},
	InternalID: whereHelperint{field: "\"abstract_users\".\"internal_id\""},
	Email:      whereHelperstring{field: "\"abstract_users\".\"email\""},
	Password:   whereHelperstring{field: "\"abstract_users\".\"password\""},
}

// AbstractUserRels is where relationship names are stored.
var AbstractUserRels = struct {
	UserAdminUsers string
	UserOrgUsers   string
}{
	UserAdminUsers: "UserAdminUsers",
	UserOrgUsers:   "UserOrgUsers",
}

// abstractUserR is where relationships are stored.
type abstractUserR struct {
	UserAdminUsers AdminUserSlice `boil:"UserAdminUsers" json:"UserAdminUsers" toml:"UserAdminUsers" yaml:"UserAdminUsers"`
	UserOrgUsers   OrgUserSlice   `boil:"UserOrgUsers" json:"UserOrgUsers" toml:"UserOrgUsers" yaml:"UserOrgUsers"`
}

// NewStruct creates a new relationship struct
func (*abstractUserR) NewStruct() *abstractUserR {
	return &abstractUserR{}
}

func (r *abstractUserR) GetUserAdminUsers() AdminUserSlice {
	if r == nil {
		return nil
	}
	return r.UserAdminUsers
}

func (r *abstractUserR) GetUserOrgUsers() OrgUserSlice {
	if r == nil {
		return nil
	}
	return r.UserOrgUsers
}

// abstractUserL is where Load methods for each relationship are stored.
type abstractUserL struct{}

var (
	abstractUserAllColumns            = []string{"id", "internal_id", "email", "password"}
	abstractUserColumnsWithoutDefault = []string{"id", "email", "password"}
	abstractUserColumnsWithDefault    = []string{"internal_id"}
	abstractUserPrimaryKeyColumns     = []string{"id"}
	abstractUserGeneratedColumns      = []string{}
)

type (
	// AbstractUserSlice is an alias for a slice of pointers to AbstractUser.
	// This should almost always be used instead of []AbstractUser.
	AbstractUserSlice []*AbstractUser
	// AbstractUserHook is the signature for custom AbstractUser hook methods
	AbstractUserHook func(context.Context, boil.ContextExecutor, *AbstractUser) error

	abstractUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	abstractUserType                 = reflect.TypeOf(&AbstractUser{})
	abstractUserMapping              = queries.MakeStructMapping(abstractUserType)
	abstractUserPrimaryKeyMapping, _ = queries.BindMapping(abstractUserType, abstractUserMapping, abstractUserPrimaryKeyColumns)
	abstractUserInsertCacheMut       sync.RWMutex
	abstractUserInsertCache          = make(map[string]insertCache)
	abstractUserUpdateCacheMut       sync.RWMutex
	abstractUserUpdateCache          = make(map[string]updateCache)
	abstractUserUpsertCacheMut       sync.RWMutex
	abstractUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var abstractUserAfterSelectHooks []AbstractUserHook

var abstractUserBeforeInsertHooks []AbstractUserHook
var abstractUserAfterInsertHooks []AbstractUserHook

var abstractUserBeforeUpdateHooks []AbstractUserHook
var abstractUserAfterUpdateHooks []AbstractUserHook

var abstractUserBeforeDeleteHooks []AbstractUserHook
var abstractUserAfterDeleteHooks []AbstractUserHook

var abstractUserBeforeUpsertHooks []AbstractUserHook
var abstractUserAfterUpsertHooks []AbstractUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AbstractUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AbstractUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AbstractUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AbstractUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AbstractUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AbstractUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AbstractUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AbstractUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AbstractUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range abstractUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAbstractUserHook registers your hook function for all future operations.
func AddAbstractUserHook(hookPoint boil.HookPoint, abstractUserHook AbstractUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		abstractUserAfterSelectHooks = append(abstractUserAfterSelectHooks, abstractUserHook)
	case boil.BeforeInsertHook:
		abstractUserBeforeInsertHooks = append(abstractUserBeforeInsertHooks, abstractUserHook)
	case boil.AfterInsertHook:
		abstractUserAfterInsertHooks = append(abstractUserAfterInsertHooks, abstractUserHook)
	case boil.BeforeUpdateHook:
		abstractUserBeforeUpdateHooks = append(abstractUserBeforeUpdateHooks, abstractUserHook)
	case boil.AfterUpdateHook:
		abstractUserAfterUpdateHooks = append(abstractUserAfterUpdateHooks, abstractUserHook)
	case boil.BeforeDeleteHook:
		abstractUserBeforeDeleteHooks = append(abstractUserBeforeDeleteHooks, abstractUserHook)
	case boil.AfterDeleteHook:
		abstractUserAfterDeleteHooks = append(abstractUserAfterDeleteHooks, abstractUserHook)
	case boil.BeforeUpsertHook:
		abstractUserBeforeUpsertHooks = append(abstractUserBeforeUpsertHooks, abstractUserHook)
	case boil.AfterUpsertHook:
		abstractUserAfterUpsertHooks = append(abstractUserAfterUpsertHooks, abstractUserHook)
	}
}

// One returns a single abstractUser record from the query.
func (q abstractUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AbstractUser, error) {
	o := &AbstractUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for abstract_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AbstractUser records from the query.
func (q abstractUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AbstractUserSlice, error) {
	var o []*AbstractUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to AbstractUser slice")
	}

	if len(abstractUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AbstractUser records in the query.
func (q abstractUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count abstract_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q abstractUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if abstract_users exists")
	}

	return count > 0, nil
}

// UserAdminUsers retrieves all the admin_user's AdminUsers with an executor via user_id column.
func (o *AbstractUser) UserAdminUsers(mods ...qm.QueryMod) adminUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"admin_users\".\"user_id\"=?", o.InternalID),
	)

	return AdminUsers(queryMods...)
}

// UserOrgUsers retrieves all the org_user's OrgUsers with an executor via user_id column.
func (o *AbstractUser) UserOrgUsers(mods ...qm.QueryMod) orgUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"org_users\".\"user_id\"=?", o.InternalID),
	)

	return OrgUsers(queryMods...)
}

// LoadUserAdminUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (abstractUserL) LoadUserAdminUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAbstractUser interface{}, mods queries.Applicator) error {
	var slice []*AbstractUser
	var object *AbstractUser

	if singular {
		var ok bool
		object, ok = maybeAbstractUser.(*AbstractUser)
		if !ok {
			object = new(AbstractUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAbstractUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAbstractUser))
			}
		}
	} else {
		s, ok := maybeAbstractUser.(*[]*AbstractUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAbstractUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAbstractUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &abstractUserR{}
		}
		args = append(args, object.InternalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &abstractUserR{}
			}

			for _, a := range args {
				if a == obj.InternalID {
					continue Outer
				}
			}

			args = append(args, obj.InternalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`admin_users`),
		qm.WhereIn(`admin_users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load admin_users")
	}

	var resultSlice []*AdminUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice admin_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on admin_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin_users")
	}

	if len(adminUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAdminUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &adminUserR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InternalID == foreign.UserID {
				local.R.UserAdminUsers = append(local.R.UserAdminUsers, foreign)
				if foreign.R == nil {
					foreign.R = &adminUserR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserOrgUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (abstractUserL) LoadUserOrgUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAbstractUser interface{}, mods queries.Applicator) error {
	var slice []*AbstractUser
	var object *AbstractUser

	if singular {
		var ok bool
		object, ok = maybeAbstractUser.(*AbstractUser)
		if !ok {
			object = new(AbstractUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAbstractUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAbstractUser))
			}
		}
	} else {
		s, ok := maybeAbstractUser.(*[]*AbstractUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAbstractUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAbstractUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &abstractUserR{}
		}
		args = append(args, object.InternalID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &abstractUserR{}
			}

			for _, a := range args {
				if a == obj.InternalID {
					continue Outer
				}
			}

			args = append(args, obj.InternalID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`org_users`),
		qm.WhereIn(`org_users.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load org_users")
	}

	var resultSlice []*OrgUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice org_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on org_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for org_users")
	}

	if len(orgUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserOrgUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orgUserR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InternalID == foreign.UserID {
				local.R.UserOrgUsers = append(local.R.UserOrgUsers, foreign)
				if foreign.R == nil {
					foreign.R = &orgUserR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserAdminUsers adds the given related objects to the existing relationships
// of the abstract_user, optionally inserting them as new records.
// Appends related to o.R.UserAdminUsers.
// Sets related.R.User appropriately.
func (o *AbstractUser) AddUserAdminUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AdminUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.InternalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"admin_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, adminUserPrimaryKeyColumns),
			)
			values := []interface{}{o.InternalID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.InternalID
		}
	}

	if o.R == nil {
		o.R = &abstractUserR{
			UserAdminUsers: related,
		}
	} else {
		o.R.UserAdminUsers = append(o.R.UserAdminUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &adminUserR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserOrgUsers adds the given related objects to the existing relationships
// of the abstract_user, optionally inserting them as new records.
// Appends related to o.R.UserOrgUsers.
// Sets related.R.User appropriately.
func (o *AbstractUser) AddUserOrgUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrgUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.InternalID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"org_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, orgUserPrimaryKeyColumns),
			)
			values := []interface{}{o.InternalID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.InternalID
		}
	}

	if o.R == nil {
		o.R = &abstractUserR{
			UserOrgUsers: related,
		}
	} else {
		o.R.UserOrgUsers = append(o.R.UserOrgUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orgUserR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AbstractUsers retrieves all the records using an executor.
func AbstractUsers(mods ...qm.QueryMod) abstractUserQuery {
	mods = append(mods, qm.From("\"abstract_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"abstract_users\".*"})
	}

	return abstractUserQuery{q}
}

// FindAbstractUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAbstractUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AbstractUser, error) {
	abstractUserObj := &AbstractUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"abstract_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, abstractUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from abstract_users")
	}

	if err = abstractUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return abstractUserObj, err
	}

	return abstractUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AbstractUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no abstract_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(abstractUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	abstractUserInsertCacheMut.RLock()
	cache, cached := abstractUserInsertCache[key]
	abstractUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			abstractUserAllColumns,
			abstractUserColumnsWithDefault,
			abstractUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(abstractUserType, abstractUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(abstractUserType, abstractUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"abstract_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"abstract_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into abstract_users")
	}

	if !cached {
		abstractUserInsertCacheMut.Lock()
		abstractUserInsertCache[key] = cache
		abstractUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AbstractUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AbstractUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	abstractUserUpdateCacheMut.RLock()
	cache, cached := abstractUserUpdateCache[key]
	abstractUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			abstractUserAllColumns,
			abstractUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update abstract_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"abstract_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, abstractUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(abstractUserType, abstractUserMapping, append(wl, abstractUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update abstract_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for abstract_users")
	}

	if !cached {
		abstractUserUpdateCacheMut.Lock()
		abstractUserUpdateCache[key] = cache
		abstractUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q abstractUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for abstract_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for abstract_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AbstractUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abstractUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"abstract_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, abstractUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in abstractUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all abstractUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AbstractUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no abstract_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(abstractUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	abstractUserUpsertCacheMut.RLock()
	cache, cached := abstractUserUpsertCache[key]
	abstractUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			abstractUserAllColumns,
			abstractUserColumnsWithDefault,
			abstractUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			abstractUserAllColumns,
			abstractUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert abstract_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(abstractUserPrimaryKeyColumns))
			copy(conflict, abstractUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"abstract_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(abstractUserType, abstractUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(abstractUserType, abstractUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert abstract_users")
	}

	if !cached {
		abstractUserUpsertCacheMut.Lock()
		abstractUserUpsertCache[key] = cache
		abstractUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AbstractUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AbstractUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no AbstractUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), abstractUserPrimaryKeyMapping)
	sql := "DELETE FROM \"abstract_users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from abstract_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for abstract_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q abstractUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no abstractUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from abstract_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for abstract_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AbstractUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(abstractUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abstractUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"abstract_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, abstractUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from abstractUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for abstract_users")
	}

	if len(abstractUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AbstractUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAbstractUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AbstractUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AbstractUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), abstractUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"abstract_users\".* FROM \"abstract_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, abstractUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in AbstractUserSlice")
	}

	*o = slice

	return nil
}

// AbstractUserExists checks if the AbstractUser row exists.
func AbstractUserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"abstract_users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if abstract_users exists")
	}

	return exists, nil
}

// Exists checks if the AbstractUser row exists.
func (o *AbstractUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AbstractUserExists(ctx, exec, o.ID)
}
